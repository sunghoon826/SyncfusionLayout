@page "/syncfusion"
@using SyncfusionLayout.Interfaces
@using SyncfusionLayout.Services
@using SyncfusionLayout.Models
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns
@using System.Text;
@using System.Text.Json;
@* @inject IDatabase<TdmsFile> TdmsFileService *@
@rendermode InteractiveServer

<PageTitle>SyncfusionChart</PageTitle>
<h3>SyncfusionChart</h3>

<div id="listbox-control">
    <h4>Select a TDMS File:</h4>
    <ul>
        @foreach (var file in tdmsFiles)
        {
            <li @onclick="() => OnFileClick(file)">@file.FileName</li>
        }
    </ul>
</div>

<SfChart ID="chart" Width="100%" Height="100%" Title="TDMS Data Chart">
    <ChartArea>
        <ChartAreaBorder Width="0" />
    </ChartArea>
    <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Double">
        <ChartAxisMajorGridLines Width="0" />
        <ChartAxisMajorTickLines Width="0" />
        <ChartAxisCrosshairTooltip Enable="true" />
    </ChartPrimaryXAxis>
    <ChartPrimaryYAxis Maximum="0.1">
        <ChartAxisLineStyle Width="0" />
        <ChartAxisMajorTickLines Width="0" />
        <ChartAxisCrosshairTooltip Enable="true" />
    </ChartPrimaryYAxis>
    <ChartCrosshairSettings Enable="true" LineType="LineType.Both" />
    <ChartTooltipSettings Enable="true" />
    <ChartLegendSettings EnableHighlight="true" />
    <ChartSeriesCollection>
        <ChartSeries DataSource="@chartData" XName="Time" YName="Value" Type="ChartSeriesType.Spline">
        </ChartSeries>
    </ChartSeriesCollection>
</SfChart>
<style>
    #listbox-control {
        width: 350px;
        margin: auto;
        padding-top: 35px;
        padding-bottom: 35px;
    }

    #chart-container {
        margin-top: 20px;
    }

    @@media screen and (max-width: 590px) {
        #listbox-control {
            width: 100%;
        }
    }
</style>

@code {

    private List<TdmsFile> tdmsFiles;
    private List<ChartData> chartData;
    private string jsonContent;
    private List<double> dataList = new List<double>();

    protected override void OnInitialized()
    {
        tdmsFiles = new List<TdmsFile>(); // 리스트 초기화
        GenerateRandomTdmsFiles();
    }

    private void GenerateRandomTdmsFiles()
    {
        Random random = new Random();

        // tdmsFiles 리스트 초기화
        tdmsFiles = new List<TdmsFile>();

        for (int i = 0; i < 10; i++)
        {
            var testData = new List<double>();

            // 12800개의 랜덤 double 값을 생성
            for (int j = 0; j < 12800; j++)
            {
                double randomValue = (random.NextDouble() * 2) - 1; // -1과 1 사이의 값
                testData.Add(randomValue);
            }

            // 새로운 TdmsFile 객체를 리스트에 추가
            tdmsFiles.Add(new TdmsFile
                {
                    Id = i + 1,
                    FileName = $"File_{i + 1}",
                    Data = testData
                });
        }
    }
    private void OnFileClick(TdmsFile file)
    {
        if (file != null && file.Data != null)
        {
            chartData = ConvertToChartData(file.Data);
            StateHasChanged(); // 차트 데이터 갱신
        }
    }
    private async Task OnSelectFile(ChangeEventArgs args)
    {
        if (args.Value != null)
        {
            var selectedId = Convert.ToInt32(args.Value.ToString());
            var selectedFile = tdmsFiles.FirstOrDefault(f => f.Id == selectedId);

            if (selectedFile != null)
            {
                // 선택된 파일의 데이터를 차트 데이터로 변환합니다.
                chartData = ConvertToChartData(selectedFile.Data);
                // UI를 갱신하여 변경된 차트 데이터를 반영합니다.
                StateHasChanged();
            }
        }
    }

    private List<ChartData> ConvertToChartData(List<double> dataList)
    {
        var chartDataList = new List<ChartData>();
        double time = 0;

        foreach (var value in dataList)
        {
            chartDataList.Add(new ChartData
                {
                    Time = time,
                    Value = value
                });
            time += 1; // 시간 간격 증가
        }

        return chartDataList;
    }

    public class TdmsFile
    {
        public int Id { get; set; }
        public string FileName { get; set; }
        public List<double> Data { get; set; }
    }

    public class ChartData
    {
        public double Time { get; set; }
        public double Value { get; set; }
    }
} 