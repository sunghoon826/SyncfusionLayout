@page "/"
@using Syncfusion.Blazor.Navigations
@using SyncfusionLayout.Interfaces
@using SyncfusionLayout.Services
@using SyncfusionLayout.Models
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Lists
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Buttons
@using System.Text;
@using System.Text.Json;
@inject IDatabase<TdmsFile> TdmsFileService
@rendermode InteractiveServer

<PageTitle>SyncfusionChart</PageTitle>

<div class="sidebar-style">
    <div class="sidebar-content">
        <SfSidebar Width="250px" Animate="false">
            <ChildContent>
                <div class="control-wrapper">
                    <SfDatePicker TValue="DateTime?">
                        <DatePickerEvents TValue="DateTime?" ValueChange="@ValueChangeHandler"></DatePickerEvents>
                    </SfDatePicker>
                </div>

                <SfListView DataSource="@pagedTdmsFiles" CssClass="e-list-template">
                    <ListViewFieldSettings TValue="TdmsFile" Id="Id" Text="FileName"></ListViewFieldSettings>
                    <ListViewTemplates TValue="TdmsFile">
                        <Template>
                            @{
                                TdmsFile currentData = (TdmsFile)context;
                                <div class="e-list-wrapper e-list-multi-line" @onclick="(e => OnFileClick(currentData))">
                                    <span class="e-list-item-header">@currentData.FileName @currentData.Date.ToString("yyyy-MM-dd")</span>
                                </div>
                            }
                        </Template>
                    </ListViewTemplates>
                </SfListView>

                <div class="pagination-controls">
                    <SfButton @onclick="FirstPage">&lt;&lt;</SfButton>
                    <SfButton @onclick="PreviousPage">&lt;</SfButton>
                    <span>@currentPage / @totalPages</span>
                    <SfButton @onclick="NextPage">&gt;</SfButton>
                    <SfButton @onclick="LastPage">&gt;&gt;</SfButton>
                </div>

                <div class="page-search">
                    <input type="text" @bind="searchedPage" placeholder="Go to page..." />
                    <SfButton @onclick="GoToPage">Go</SfButton>
                </div>
            </ChildContent>
        </SfSidebar>
    </div>
</div>

<div class="main-content">
    <SfChart ID="chart" Width="100%" Height="100%" Title="TDMS Data Chart">
        <ChartEvents ChartMouseClick="@OnChartMouseClick" />
        <ChartArea>
            <ChartAreaBorder Width="0" />
        </ChartArea>
        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Double">
            @if (isClicked)
            {
                foreach (var position in striplinePositions)
                {
                    <ChartStriplines>
                        <ChartStripline Start="@position" Size="1" SizeType="SizeType.Pixel" Color="red"></ChartStripline>
                    </ChartStriplines>
                }
            }
            <ChartAxisMajorGridLines Width="0" />
            <ChartAxisMajorTickLines Width="0" />
            <ChartAxisCrosshairTooltip Enable="true" />
        </ChartPrimaryXAxis>
        <ChartPrimaryYAxis Maximum="0.1">
            <ChartAxisLineStyle Width="0" />
            <ChartAxisMajorTickLines Width="0" />
            <ChartAxisCrosshairTooltip Enable="true" />
        </ChartPrimaryYAxis>
        <ChartCrosshairSettings Enable="true" LineType="LineType.Both" />
        <ChartTooltipSettings Enable="true" />
        <ChartLegendSettings EnableHighlight="true" />
        <ChartSeriesCollection>
            <ChartSeries DataSource="@chartData" XName="Time" YName="Value" Type="ChartSeriesType.Spline">
            </ChartSeries>
        </ChartSeriesCollection>
    </SfChart>
    <div>
        <SfTextBox @bind-Value="@striplineGap" Input="@TestCode" Placeholder="Enter Stripline Gap"></SfTextBox>
        <SfTextBox @bind-Value="@striplinesEachSide" Input="@TestCode" Placeholder="Enter Striplines Each Side"></SfTextBox>
    </div>
</div>

<style>
    .sidebar-style {
        width: 220px;
        float: left;
        background-color: #9c9c9c;
    }

    .main-content {
        margin-left: 220px;
    }

    .content {
        margin-left: 0;
        transition: margin-left .5s;
    }

    .pagination-controls {
        text-align: center;
        margin-top: 20px;
    }
</style>

@code {
    private List<TdmsFile> tdmsFiles;
    private List<ChartData> chartData;
    private List<double> dataList = new List<double>();
    private double clickedPosition; // 클릭된 위치의 X축 값 저장
    private bool isClicked = false; // 클릭 여부 확인
    private List<double> striplinePositions = new List<double>(); // Stripline 위치를 저장하는 리스트
    private string striplineGap = "100";
    private string striplinesEachSide = "7";
    private TdmsFile Selected;
    private DateTime? SelectedDate;

    private List<TdmsFile> pagedTdmsFiles = new List<TdmsFile>();
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages;
    private string searchedPage;

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            UpdatePagedTdmsFiles();
        }
    }

    private void NextPage()
    {
        var totalPages = (int)Math.Ceiling(tdmsFiles.Count / (double)pageSize);
        if (currentPage < totalPages)
        {
            currentPage++;
            UpdatePagedTdmsFiles();
        }
    }

    private void FirstPage()
    {
        currentPage = 1;
        UpdatePagedTdmsFiles();
    }

    private void LastPage()
    {
        var totalPages = (int)Math.Ceiling(tdmsFiles.Count / (double)pageSize);
        currentPage = totalPages;
        UpdatePagedTdmsFiles();
    }

    private void GoToPage()
    {
        if (int.TryParse(searchedPage, out int pageNumber))
        {
            var totalPages = (int)Math.Ceiling(tdmsFiles.Count / (double)pageSize);
            if (pageNumber >= 1 && pageNumber <= totalPages)
            {
                currentPage = pageNumber;
                UpdatePagedTdmsFiles();
            }
            else
            {
                // 사용자에게 입력한 페이지 번호가 범위를 벗어났음을 알림
            }
        }
        else
        {
            // 사용자에게 유효한 페이지 번호를 입력하라는 메시지를 표시
        }
    }

    private void UpdatePagedTdmsFiles()
    {
        var skip = (currentPage - 1) * pageSize;
        pagedTdmsFiles = tdmsFiles.Skip(skip).Take(pageSize).ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadDataForSelectedDate(DateTime.UtcNow); // 현재 날짜로 데이터 로드
    }

    public async Task ValueChangeHandler(ChangedEventArgs<DateTime?> args)
    {
        if (args.Value.HasValue)
        {
            await LoadDataForSelectedDate(args.Value.Value); // 선택된 날짜로 데이터 로드
        }
    }

    private async Task LoadDataForSelectedDate(DateTime date)
    {
        SelectedDate = date; // 선택된 날짜 업데이트
        tdmsFiles = await TdmsFileService.GetAsync(SelectedDate.Value.ToUniversalTime());

        if (tdmsFiles.Any())
        {
            totalPages = (int)Math.Ceiling((double)tdmsFiles.Count / pageSize);
            currentPage = 1; // 데이터 로딩 시 항상 첫 페이지로 리셋
            UpdatePagedTdmsFiles();
        }
        else
        {
            pagedTdmsFiles.Clear();
        }

        StateHasChanged(); // UI 업데이트
    }

    private void LoadPage(int pageNumber)
    {
        currentPage = pageNumber;
        var skip = (currentPage - 1) * pageSize;

        if (SelectedDate.HasValue)
        {
            pagedTdmsFiles = tdmsFiles.Where(file => file.Date.Date == SelectedDate.Value.Date).Skip(skip).Take(pageSize).ToList();
        }
        else
        {
            pagedTdmsFiles = tdmsFiles.Skip(skip).Take(pageSize).ToList();
        }

        StateHasChanged(); // UI 업데이트
    }

    private void OnFileClick(TdmsFile file)
    {
        if (file != null && file.Data != null)
        {
            var jsonString = Encoding.UTF8.GetString(file.Data);
            ParseJsonData(jsonString);
            chartData = ConvertToChartData(dataList);
            Selected = file;
            StateHasChanged();
        }
    }

    private void OnChartMouseClick(ChartMouseEventArgs args)
    {
        double clickedXValue = Convert.ToDouble(args.AxisData["PrimaryXAxis"]);
        CalculateStriplinePositions(clickedXValue);
        isClicked = true;
        StateHasChanged();
    }

    private void TestCode()
    {
        StateHasChanged();
    }

    private void CalculateStriplinePositions(double clickedPosition)
    {
        striplinePositions.Clear(); // 이전에 계산된 Stripline 위치를 초기화
        int gap = int.Parse(striplineGap); // 사용자가 입력한 Stripline 간격
        int sides = int.Parse(striplinesEachSide); // 사용자가 입력한 각 쪽에 생성할 Stripline의 개수

        for (int i = -sides; i <= sides; i++)
        {
            double position = clickedPosition + (i * gap);
            // Stripline의 위치가 차트의 x축 범위 내에 있는지 확인
            if (position >= 0 && position <= 12800) // x축의 최소값과 최대값
            {
                striplinePositions.Add(position); // 범위 내에 있는 Stripline 위치만 추가
            }
        }
    }

    private int FindClosestDataPointIndex(double clickedXValue)
    {
        int closestIndex = 0;
        double minDifference = double.MaxValue;

        for (int i = 0; i < dataList.Count; i++)
        {
            double difference = Math.Abs(i - clickedXValue); // 인덱스와 클릭된 x축 값의 차이를 계산
            if (difference < minDifference)
            {
                minDifference = difference;
                closestIndex = i; // 가장 가까운 인덱스를 업데이트
            }
        }

        return closestIndex;
    }

    private void ParseJsonData(string json)
    {
        try
        {
            var jsonDoc = JsonDocument.Parse(json);
            var root = jsonDoc.RootElement;
            if (root.TryGetProperty("Data", out var dataElement) && dataElement.ValueKind == JsonValueKind.Array)
            {
                dataList.Clear();
                foreach (var item in dataElement.EnumerateArray())
                {
                    if (item.TryGetDouble(out double value))
                    {
                        dataList.Add(value);
                    }
                }
            }
        }
        catch (JsonException ex)
        {
            Console.WriteLine($"JSON parsing error: {ex.Message}");
        }
    }

    private List<ChartData> ConvertToChartData(List<double> dataList)
    {
        var chartDataList = new List<ChartData>();
        double time = 0;
        foreach (var value in dataList)
        {
            chartDataList.Add(new ChartData { Time = time, Value = value });
            time += 1;
        }
        return chartDataList;
    }
}