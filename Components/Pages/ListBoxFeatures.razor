@page "/syncfusion"
@using SyncfusionLayout.Interfaces
@using SyncfusionLayout.Services
@using SyncfusionLayout.Models
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns
@using System.Text;
@using System.Text.Json;
@using Microsoft.JSInterop;
@inject IDatabase<TdmsFile> TdmsFileService
@rendermode InteractiveServer

<PageTitle>SyncfusionChart</PageTitle>
<h3>SyncfusionChart</h3>

<div id="listbox-control">
    <h4>Select a TDMS File:</h4>
    <ul>
        @foreach (var file in tdmsFiles)
        {
            <li class="list-item" @onclick="() => OnFileClick(file)">@file.FileName</li>
        }
    </ul>
</div>
<SfChart ID="chart" Width="100%" Height="100%" Title="TDMS Data Chart">
    <ChartEvents ChartMouseClick="@OnChartMouseClick" /> @* ChartMouseClick 이벤트 추가 *@
    <ChartArea>
        <ChartAreaBorder Width="0" />
    </ChartArea>
    <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Double">
        @if (isClicked)
        {
            foreach (var position in striplinePositions)
            {
                <ChartStriplines>
                    <ChartStripline Start="@position" Size="1" SizeType="SizeType.Pixel" Color="red"></ChartStripline>
                </ChartStriplines>
            }
        }
        <ChartAxisMajorGridLines Width="0" />
        <ChartAxisMajorTickLines Width="0" />
        <ChartAxisCrosshairTooltip Enable="true" />
    </ChartPrimaryXAxis>
    <ChartPrimaryYAxis Maximum="0.1">
        <ChartAxisLineStyle Width="0" />
        <ChartAxisMajorTickLines Width="0" />
        <ChartAxisCrosshairTooltip Enable="true" />
    </ChartPrimaryYAxis>
    <ChartCrosshairSettings Enable="true" LineType="LineType.Both" />
    <ChartTooltipSettings Enable="true" />
    <ChartLegendSettings EnableHighlight="true" />
    <ChartSeriesCollection>
        <ChartSeries DataSource="@chartData" XName="Time" YName="Value" Type="ChartSeriesType.Spline">
        </ChartSeries>
    </ChartSeriesCollection>
</SfChart>
<style>
    #listbox-control {
        width: 350px;
        margin: auto;
        padding-top: 35px;
        padding-bottom: 35px;
    }
    #listbox-control ul {
        list-style-type: none;
        padding: 0;
    }
    .list-item {
        padding: 10px;
        margin-bottom: 5px;
        background-color: #f0f0f0;
        border: 1px solid #ddd;
        cursor: pointer;
        transition: background-color 0.3s, box-shadow 0.3s;
    }
    .list-item:hover {
        background-color: #e0e0e0;
    }
    .list-item:active {
        background-color: #d0d0d0;
        box-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);
    }
   {
        #listbox-control {
            width: 100%;
        }
    }
</style>
@code {
    private List<TdmsFile> tdmsFiles;
    private List<ChartData> chartData;
    private List<double> dataList = new List<double>();
    private double clickedPosition; // 클릭된 위치의 X축 값 저장
    private bool isClicked = false; // 클릭 여부 확인
    private List<double> striplinePositions = new List<double>(); // Stripline 위치를 저장하는 리스트
  
    protected override async Task OnInitializedAsync()
    {
        try
        {
            tdmsFiles = new List<TdmsFile>();
            var files = await TdmsFileService.GetAsync();
            if (files != null)
            {
                tdmsFiles.AddRange(files);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading files: {ex.Message}");
        }
    }

    private void OnFileClick(TdmsFile file)
    {
        if (file != null && file.Data != null)
        {
            var jsonString = Encoding.UTF8.GetString(file.Data);
            ParseJsonData(jsonString);
            chartData = ConvertToChartData(dataList);
            StateHasChanged();
        }
    }
    private void OnChartMouseClick(ChartMouseEventArgs args)
    {
        double clickedXValue = Convert.ToDouble(args.AxisData["PrimaryXAxis"]);
        int closestIndex = FindClosestDataPointIndex(clickedXValue);
        CalculateStriplinePositions(closestIndex); // Stripline 위치 계산
        isClicked = true;
        StateHasChanged();
    }
    private void CalculateStriplinePositions(int closestIndex)
    {
        striplinePositions.Clear(); // 이전에 계산된 Stripline 위치를 초기화

        int totalStriplines = 14; // 왼쪽 7개, 오른쪽 7개, 총 14개
        int half = totalStriplines / 2;
        int gap = 1000; // Stripline 간의 간격을 100으로 설정

        for (int i = -half; i <= half; i++)
        {
            int index = closestIndex + (i * gap); // 각 Stripline 위치에 간격을 곱해줌
            if (index >= 0 && index < dataList.Count) // 인덱스가 데이터 리스트의 범위 내에 있는지 확인
            {
                striplinePositions.Add(index); // Stripline 위치 추가
            }
        }
    }

    private int FindClosestDataPointIndex(double clickedXValue)
    {
        int closestIndex = 0;
        double minDifference = double.MaxValue;

        for (int i = 0; i < dataList.Count; i++)
        {
            double difference = Math.Abs(i - clickedXValue); // 인덱스와 클릭된 x축 값의 차이를 계산
            if (difference < minDifference)
            {
                minDifference = difference;
                closestIndex = i; // 가장 가까운 인덱스를 업데이트
            }
        }

        return closestIndex;
    }
    private string ConvertToUtf8String(byte[] data)
    {
        return Encoding.UTF8.GetString(data);
    }

    private void ParseJsonData(string json)
    {
        try
        {
            var jsonDoc = JsonDocument.Parse(json);
            var root = jsonDoc.RootElement;
            if (root.TryGetProperty("Data", out var dataElement) && dataElement.ValueKind == JsonValueKind.Array)
            {
                dataList.Clear();
                foreach (var item in dataElement.EnumerateArray())
                {
                    if (item.TryGetDouble(out double value))
                    {
                        dataList.Add(value);
                    }
                }
            }
        }
        catch (JsonException ex)
        {
            Console.WriteLine($"JSON parsing error: {ex.Message}");
        }
    }

    private List<ChartData> ConvertToChartData(List<double> dataList)
    {
        var chartDataList = new List<ChartData>();
        double time = 0;
        foreach (var value in dataList)
        {
            chartDataList.Add(new ChartData { Time = time, Value = value });
            time += 1;
        }
        return chartDataList;
    }

    public class ChartData
    {
        public double Time { get; set; }
        public double Value { get; set; }
    }
}