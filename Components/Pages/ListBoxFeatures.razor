@page "/syncfusion"
@using Syncfusion.Blazor.Navigations
@using SyncfusionLayout.Interfaces
@using SyncfusionLayout.Services
@using SyncfusionLayout.Models
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Lists
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.DropDowns
@using System.Text;
@using System.Text.Json;
@inject IDatabase<TdmsFile> TdmsFileService
@rendermode InteractiveServer

<PageTitle>SyncfusionChart</PageTitle>
<h3>SyncfusionChart</h3>

<div id="container">
    <SfSidebar @ref="sidebarObj" Width="250px" Type="SidebarType.Over" @bind-IsOpen="SidebarToggle">
        <ChildContent>
            <div class="sidebar-content">
                <h4>Select a TDMS File:</h4>
                <SfListView DataSource="@tdmsFiles" CssClass="e-list-template">
                    <ListViewFieldSettings TValue="TdmsFile" Id="Id" Text="FileName"></ListViewFieldSettings>
                    <ListViewTemplates TValue="TdmsFile">
                        <Template>
                            @{
                                TdmsFile currentData = (TdmsFile)context;
                                <div class="e-list-wrapper e-list-multi-line" @onclick="(e => OnFileClick(currentData))">
                                    <span class="e-list-item-header">@currentData.FileName</span>
                                </div>
                            }
                        </Template>
                    </ListViewTemplates>
                </SfListView>
            </div>
        </ChildContent>
    </SfSidebar>
    <div id="sidebar-toggle">
        <SfButton @onclick="Toggle" IsToggle="true" IsPrimary="true">Toggle Sidebar</SfButton>
    </div>
</div>


<SfChart ID="chart" Width="100%" Height="100%" Title="TDMS Data Chart">
    <ChartEvents ChartMouseClick="@OnChartMouseClick" /> @* ChartMouseClick 이벤트 추가 *@
    <ChartArea>
        <ChartAreaBorder Width="0" />
    </ChartArea>
    <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Double">
        @if (isClicked)
        {
            foreach (var position in striplinePositions)
            {
                <ChartStriplines>
                    <ChartStripline Start="@position" Size="1" SizeType="SizeType.Pixel" Color="red"></ChartStripline>
                </ChartStriplines>
            }
        }
        <ChartAxisMajorGridLines Width="0" />
        <ChartAxisMajorTickLines Width="0" />
        <ChartAxisCrosshairTooltip Enable="true" />
    </ChartPrimaryXAxis>
    <ChartPrimaryYAxis Maximum="0.1">
        <ChartAxisLineStyle Width="0" />
        <ChartAxisMajorTickLines Width="0" />
        <ChartAxisCrosshairTooltip Enable="true" />
    </ChartPrimaryYAxis>
    <ChartCrosshairSettings Enable="true" LineType="LineType.Both" />
    <ChartTooltipSettings Enable="true" />
    <ChartLegendSettings EnableHighlight="true" />
    <ChartSeriesCollection>
        <ChartSeries DataSource="@chartData" XName="Time" YName="Value" Type="ChartSeriesType.Spline">
        </ChartSeries>
    </ChartSeriesCollection>
</SfChart>
<div>
    <SfTextBox @bind-Value="@striplineGap" Input="@TestCode" Placeholder="Enter Stripline Gap"></SfTextBox>
    <SfTextBox @bind-Value="@striplinesEachSide" Input="@TestCode" Placeholder="Enter Striplines Each Side"></SfTextBox>
</div>
<style>
    #listbox-control {
        width: 350px;
        margin: auto;
        padding-top: 35px;
        padding-bottom: 35px;
    }
    #listbox-control ul {
        list-style-type: none;
        padding: 0;
    }
    .list-item {
        padding: 10px;
        margin-bottom: 5px;
        background-color: #f0f0f0;
        border: 1px solid #ddd;
        cursor: pointer;
        transition: background-color 0.3s, box-shadow 0.3s;
    }
    .list-item:hover {
        background-color: #e0e0e0;
    }
    .list-item:active {
        background-color: #d0d0d0;
        box-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);
    }
   {
        #listbox-control {
            width: 100%;
        }
    }
</style>


@code {
    private List<TdmsFile> tdmsFiles;
    private List<ChartData> chartData;
    private List<double> dataList = new List<double>();
    private double clickedPosition; // 클릭된 위치의 X축 값 저장
    private bool isClicked = false; // 클릭 여부 확인
    private List<double> striplinePositions = new List<double>(); // Stripline 위치를 저장하는 리스트
    private string striplineGap = "100"; // Default gap as string
    private string striplinesEachSide = "7"; // Default number of striplines each side as string
    private TdmsFile Selected;

    SfSidebar? sidebarObj;
    public bool SidebarToggle = false;



    protected override async Task OnInitializedAsync()
    {
        try
        {
            tdmsFiles = new List<TdmsFile>();
            var files = await TdmsFileService.GetAsync();
            if (files != null)
            {
                tdmsFiles.AddRange(files);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading files: {ex.Message}");
        }
    }

    private void OnFileClick(TdmsFile file)
    {
        if (file != null && file.Data != null)
        {
            var jsonString = Encoding.UTF8.GetString(file.Data);
            ParseJsonData(jsonString);
            chartData = ConvertToChartData(dataList);
            Selected = file;
            StateHasChanged();
        }
    }

    public void Toggle()
    {
        SidebarToggle = !SidebarToggle;
    }
    private void OnChartMouseClick(ChartMouseEventArgs args)
    {
        double clickedXValue = Convert.ToDouble(args.AxisData["PrimaryXAxis"]);
        CalculateStriplinePositions(clickedXValue);
        isClicked = true;
        StateHasChanged();
    }
    private void ApplyStriplineSettings()
    {
        isClicked = true;
        StateHasChanged();
    }

    private void CalculateStriplinePositions(double clickedPosition)
    {
        striplinePositions.Clear(); // 이전에 계산된 Stripline 위치를 초기화
        int gap = int.Parse(striplineGap); // 사용자가 입력한 Stripline 간격
        int sides = int.Parse(striplinesEachSide); // 사용자가 입력한 각 쪽에 생성할 Stripline의 개수

        for (int i = -sides; i <= sides; i++)
        {
            double position = clickedPosition + (i * gap);
            // Stripline의 위치가 차트의 x축 범위 내에 있는지 확인
            if (position >= 0 && position <= 12800) // x축의 최소값과 최대값
            {
                striplinePositions.Add(position); // 범위 내에 있는 Stripline 위치만 추가
            }
        }
    }

    private int FindClosestDataPointIndex(double clickedXValue)
    {
        int closestIndex = 0;
        double minDifference = double.MaxValue;

        for (int i = 0; i < dataList.Count; i++)
        {
            double difference = Math.Abs(i - clickedXValue); // 인덱스와 클릭된 x축 값의 차이를 계산
            if (difference < minDifference)
            {
                minDifference = difference;
                closestIndex = i; // 가장 가까운 인덱스를 업데이트
            }
        }

        return closestIndex;
    }
    private string ConvertToUtf8String(byte[] data)
    {
        return Encoding.UTF8.GetString(data);
    }

    private void ParseJsonData(string json)
    {
        try
        {
            var jsonDoc = JsonDocument.Parse(json);
            var root = jsonDoc.RootElement;
            if (root.TryGetProperty("Data", out var dataElement) && dataElement.ValueKind == JsonValueKind.Array)
            {
                dataList.Clear();
                foreach (var item in dataElement.EnumerateArray())
                {
                    if (item.TryGetDouble(out double value))
                    {
                        dataList.Add(value);
                    }
                }
            }
        }
        catch (JsonException ex)
        {
            Console.WriteLine($"JSON parsing error: {ex.Message}");
        }
    }

    private List<ChartData> ConvertToChartData(List<double> dataList)
    {
        var chartDataList = new List<ChartData>();
        double time = 0;
        foreach (var value in dataList)
        {
            chartDataList.Add(new ChartData { Time = time, Value = value });
            time += 1;
        }
        return chartDataList;
    }
    private void TestCode(InputEventArgs args)
    {
        StateHasChanged();
    }
    public class ChartData
    {
        public double Time { get; set; }
        public double Value { get; set; }
    }
}