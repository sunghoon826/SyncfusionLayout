@page "/syncfusion"
@using SyncfusionLayout.Interfaces
@using SyncfusionLayout.Services
@using SyncfusionLayout.Models
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns
@using System.Text;
@using System.Text.Json;
@using Microsoft.JSInterop;
@inject IDatabase<TdmsFile> TdmsFileService
@rendermode InteractiveServer

<PageTitle>SyncfusionChart</PageTitle>
<h3>SyncfusionChart</h3>

<div id="listbox-control">
    <h4>Select a TDMS File:</h4>
    <ul>
        @foreach (var file in tdmsFiles)
        {
            <li @onclick="() => OnFileClick(file)">@file.FileName</li>
        }
    </ul>
</div>
<SfChart ID="chart" Width="100%" Height="100%" Title="TDMS Data Chart">
    <ChartArea>
        <ChartAreaBorder Width="0" />
    </ChartArea>
    <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Double">
        <ChartAxisMajorGridLines Width="0" />
        <ChartAxisMajorTickLines Width="0" />
        <ChartAxisCrosshairTooltip Enable="true" />
    </ChartPrimaryXAxis>
    <ChartPrimaryYAxis Maximum="0.1">
        <ChartAxisLineStyle Width="0" />
        <ChartAxisMajorTickLines Width="0" />
        <ChartAxisCrosshairTooltip Enable="true" />
    </ChartPrimaryYAxis>
    <ChartCrosshairSettings Enable="true" LineType="LineType.Both" />
    <ChartTooltipSettings Enable="true" />
    <ChartLegendSettings EnableHighlight="true" />
    <ChartSeriesCollection>
        <ChartSeries DataSource="@chartData" XName="Time" YName="Value" Type="ChartSeriesType.Spline">
        </ChartSeries>
    </ChartSeriesCollection>
</SfChart>
<style>
    #listbox-control {
        width: 350px;
        margin: auto;
        padding-top: 35px;
        padding-bottom: 35px;
    }
    
        #listbox-control {
            width: 100%;
        }
    }
</style>
@code {
    private List<TdmsFile> tdmsFiles;
    private List<ChartData> chartData;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            tdmsFiles = new List<TdmsFile>();
            var files = await TdmsFileService.GetAsync();
            if (files != null)
            {
                tdmsFiles.AddRange(files);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading files: {ex.Message}");
            // 적절한 오류 처리
        }
    }



    private void OnFileClick(TdmsFile file)
    {
        if (file != null && file.Data != null)
        {
            var doubleList = ConvertBytesToListDouble(file.Data);
            chartData = ConvertToChartData(doubleList);
            StateHasChanged();
        }
    }

    private List<double> ConvertBytesToListDouble(byte[] data)    // 변환방식의 문제 해결
    {
        var result = new List<double>();
        for (int i = 0; i < data.Length; i += sizeof(double))
        {
            if (i + sizeof(double) <= data.Length)
            {
                double value = BitConverter.ToDouble(data, i);
                result.Add(value);
            }
        }
        return result;
    }

    private List<ChartData> ConvertToChartData(List<double> dataList)
    {
        var chartDataList = new List<ChartData>();
        double time = 0;

        foreach (var value in dataList)
        {
            chartDataList.Add(new ChartData
                {
                    Time = time,
                    Value = value
                });
            time += 1;
        }

        return chartDataList;
    }

    public class ChartData
    {
        public double Time { get; set; }
        public double Value { get; set; }
    }
}